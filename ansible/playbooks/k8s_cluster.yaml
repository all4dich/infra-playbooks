---
#
# Play 1: Prepare ALL nodes for Kubernetes
# This play runs on both master and worker nodes. It installs necessary
# packages, configures the container runtime, and prepares the system.
#
- name: 1. Prepare all k8s nodes
  hosts: all
  become: yes
  tasks:
    - name: Update apt package cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Disable swap for Kubernetes
      ansible.builtin.command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Remove swap entry from /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '\s+swap\s+'
        state: absent

    - name: Load required kernel modules
      ansible.builtin.modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Ensure required kernel modules are loaded on boot
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter

    - name: Set required sysctl params for Kubernetes networking
      ansible.builtin.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/k8s.conf
        state: present
        reload: yes
      loop:
        - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { key: 'net.ipv4.ip_forward', value: '1' }

    - name: Install prerequisite packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
        state: present

    - name: Install containerd (container runtime)
      ansible.builtin.apt:
        name: containerd.io
        state: present

    - name: Create default containerd configuration
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate containerd config and enable SystemdCgroup
      ansible.builtin.shell: |
        containerd config default | tee /etc/containerd/config.toml

    - name: Enable SystemdCgroup
      ansible.builtin.shell: |
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

    - name: Ensure CRI plugin is enabled in containerd
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*disabled_plugins = \["cri"\]'
        line: '# disabled_plugins = ["cri"]'
        state: present

    - name: Restart and enable containerd service
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: Download and add Google's APT signing key for Kubernetes
      ansible.builtin.shell: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes APT repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
        state: present
        filename: kubernetes

    - name: Install Kubernetes components (kubelet, kubeadm, kubectl)
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Hold Kubernetes components at their current version
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
    - name: Set crictl's runtime endpoint to containerd
      ansible.builtin.shell: |
        crictl config --set runtime-endpoint=unix:///run/containerd/containerd.sock --set image-endpoint=unix:///run/containerd/containerd.sock

#
# Play 2: Initialize the Kubernetes Master Node
# This play runs ONLY on the master node.
#
- name: 2. Initialize the Kubernetes master node
  hosts: master
  become: yes
  tasks:
    - name: Reset existing kubeadm cluster if present
      ansible.builtin.command: kubeadm reset -f
      register: kubeadm_reset_result
      failed_when: "kubeadm_reset_result.rc != 0 and 'could not find a JNI environment' not in kubeadm_reset_result.stderr"

    - name: Initialize the Kubernetes cluster with kubeadm
      ansible.builtin.command: "kubeadm init --apiserver-advertise-address={{ ansible_default_ipv4['address'] }} --pod-network-cidr=10.10.0.0/16 --cri-socket=unix:///run/containerd/containerd.sock"
      register: kubeadm_init_result

    - name: Create .kube directory for the user
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy admin.conf to user's .kube directory
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Generate and register the worker join command
      ansible.builtin.command: kubeadm token create --print-join-command
      register: kubeadm_join_command
      changed_when: false

    - name: Store the join command for worker nodes to use
      ansible.builtin.add_host:
        name: "kubeadm_join_command"
        value: "{{ kubeadm_join_command.stdout }}"

    - name: Apply Calico CNI for pod networking
      ansible.builtin.command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/calico.yaml
      environment:
        KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
      become: no # Run as the user, not root
      changed_when: false

#
# Play 3: Join Worker Nodes to the Cluster
# This play runs ONLY on the worker nodes.
#
- name: 3. Join worker nodes to the Kubernetes cluster
  hosts: workers
  become: yes
  tasks:
    - name: Reset existing kubeadm cluster on worker
      ansible.builtin.command: kubeadm reset -f
      register: kubeadm_reset_result
      failed_when: "kubeadm_reset_result.rc != 0 and 'could not find a JNI environment' not in kubeadm_reset_result.stderr"

    - name: Join the worker node to the cluster
      ansible.builtin.command: "{{ hostvars['kubeadm_join_command']['value'] }}"
      register: worker_join_result
      changed_when: "'This node has joined the cluster' in worker_join_result.stdout"
